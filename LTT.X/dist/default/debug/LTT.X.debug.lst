

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri Feb 28 14:32:07 2025

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18LF26K83
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	text0,global,reloc=2,class=CODE,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	text5,global,reloc=2,class=CODE,delta=1
    13                           	psect	text6,global,reloc=2,class=CODE,delta=1
    14                           	psect	text7,global,reloc=2,class=CODE,delta=1
    15                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    16                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    17                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    18   000000                     
    19                           ; Generated 12/10/2023 GMT
    20                           ; 
    21                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution. Publication is not required when
    35                           ;        this file is used in an embedded application.
    36                           ; 
    37                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    38                           ;        software without specific prior written permission.
    39                           ; 
    40                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    41                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    42                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    43                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    44                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    45                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    46                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    47                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    48                           ; 
    49                           ; 
    50                           ; Code-generator required, PIC18LF26K83 Definitions
    51                           ; 
    52                           ; SFR Addresses
    53   000000                     _LATAbits	set	16314
    54   000000                     _LATA5	set	130517
    55   000000                     _LATA4	set	130516
    56   000000                     _LATA3	set	130515
    57   000000                     _ANSELAbits	set	14912
    58   000000                     _ADPCH	set	16113
    59   000000                     _ADCON0bits	set	16120
    60   000000                     _TRISAbits	set	16322
    61   000000                     _LATA2	set	130514
    62   000000                     _TRISCbits	set	16324
    63   000000                     _SPI1RXB	set	15632
    64   000000                     _SPI1CON0bits	set	15636
    65   000000                     _ADRESL	set	16111
    66   000000                     _ADRESH	set	16112
    67   000000                     _PORTCbits	set	16332
    68   000000                     _SPI1STATUSbits	set	15639
    69   000000                     _SPI1BAUD	set	15641
    70   000000                     _SPI1CON2bits	set	15638
    71   000000                     _SPI1CON1bits	set	15637
    72   000000                     _SPI1TXB	set	15633
    73                           
    74                           ; #config settings
    75                           
    76                           	psect	cinit
    77   0010DA                     __pcinit:
    78                           	callstack 0
    79   0010DA                     start_initialization:
    80                           	callstack 0
    81   0010DA                     __initialization:
    82                           	callstack 0
    83   0010DA                     end_of_initialization:
    84                           	callstack 0
    85   0010DA                     __end_of__initialization:
    86                           	callstack 0
    87   0010DA  0100               	movlb	0
    88   0010DC  EF5B  F008         	goto	_main	;jump to C main() function
    89                           
    90                           	psect	cstackCOMRAM
    91   000001                     __pcstackCOMRAM:
    92                           	callstack 0
    93   000001                     Read_SPI@data:
    94                           	callstack 0
    95   000001                     Write_SPI@data:
    96                           	callstack 0
    97                           
    98                           ; 1 bytes @ 0x0
    99   000001                     	ds	1
   100   000002                     Read_CC1200@reg:
   101                           	callstack 0
   102                           
   103                           ; 1 bytes @ 0x1
   104   000002                     	ds	1
   105   000003                     
   106                           ; 1 bytes @ 0x2
   107 ;;
   108 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   109 ;;
   110 ;; *************** function _main *****************
   111 ;; Defined at:
   112 ;;		line 24 in file "main.c"
   113 ;; Parameters:    Size  Location     Type
   114 ;;		None
   115 ;; Auto vars:     Size  Location     Type
   116 ;;		None
   117 ;; Return value:  Size  Location     Type
   118 ;;                  1    wreg      void 
   119 ;; Registers used:
   120 ;;		wreg, status,2, status,0, cstack
   121 ;; Tracked objects:
   122 ;;		On entry : 0/0
   123 ;;		On exit  : 0/0
   124 ;;		Unchanged: 0/0
   125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   127 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   129 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   130 ;;Total ram usage:        0 bytes
   131 ;; Hardware stack levels required when called: 2
   132 ;; This function calls:
   133 ;;		_Board_Init
   134 ;;		_Read_CC1200
   135 ;; This function is called by:
   136 ;;		Startup code after reset
   137 ;; This function uses a non-reentrant model
   138 ;;
   139                           
   140                           	psect	text0
   141   0010B6                     __ptext0:
   142                           	callstack 0
   143   0010B6                     _main:
   144                           	callstack 29
   145   0010B6                     
   146                           ;main.c: 25:     Board_Init();
   147   0010B6  EC62  F008         	call	_Board_Init	;wreg free
   148   0010BA                     
   149                           ;main.c: 27:     Read_CC1200(0x3D);
   150   0010BA  0E3D               	movlw	61
   151   0010BC  EC01  F008         	call	_Read_CC1200
   152   0010C0  EFFE  F07F         	goto	start
   153   0010C4                     __end_of_main:
   154                           	callstack 0
   155                           
   156 ;; *************** function _Read_CC1200 *****************
   157 ;; Defined at:
   158 ;;		line 28 in file "cc1200.c"
   159 ;; Parameters:    Size  Location     Type
   160 ;;  reg             1    wreg     unsigned char 
   161 ;; Auto vars:     Size  Location     Type
   162 ;;  reg             1    1[COMRAM] unsigned char 
   163 ;;  val             1    0        unsigned char 
   164 ;; Return value:  Size  Location     Type
   165 ;;                  1    wreg      unsigned char 
   166 ;; Registers used:
   167 ;;		wreg, status,2, status,0, cstack
   168 ;; Tracked objects:
   169 ;;		On entry : 0/0
   170 ;;		On exit  : 0/0
   171 ;;		Unchanged: 0/0
   172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   174 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   176 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   177 ;;Total ram usage:        1 bytes
   178 ;; Hardware stack levels used: 1
   179 ;; Hardware stack levels required when called: 1
   180 ;; This function calls:
   181 ;;		_Read_SPI
   182 ;;		_Write_SPI
   183 ;; This function is called by:
   184 ;;		_main
   185 ;; This function uses a non-reentrant model
   186 ;;
   187                           
   188                           	psect	text1
   189   001002                     __ptext1:
   190                           	callstack 0
   191   001002                     _Read_CC1200:
   192                           	callstack 29
   193                           
   194                           ;incstack = 0
   195                           ;Read_CC1200@reg stored from wreg
   196   001002  6E02               	movwf	Read_CC1200@reg^0,c
   197   001004                     
   198                           ;cc1200.c: 29:     uint8_t val;;cc1200.c: 30:     LATA5 = 0;
   199   001004  9ABA               	bcf	16314,5,c	;volatile
   200   001006                     l111:
   201   001006  B8CC               	btfsc	204,4,c	;volatile
   202   001008  EF08  F008         	goto	u31
   203   00100C  EF0A  F008         	goto	u30
   204   001010                     u31:
   205   001010  EF03  F008         	goto	l111
   206   001014                     u30:
   207   001014                     
   208                           ;cc1200.c: 32:     if (reg > 0x2F) {
   209   001014  0E2F               	movlw	47
   210   001016  6402               	cpfsgt	Read_CC1200@reg^0,c
   211   001018  EF10  F008         	goto	u41
   212   00101C  EF12  F008         	goto	u40
   213   001020                     u41:
   214   001020  EF1A  F008         	goto	l834
   215   001024                     u40:
   216   001024                     
   217                           ;cc1200.c: 34:         Write_SPI(0b10101111);
   218   001024  0EAF               	movlw	175
   219   001026  EC41  F008         	call	_Write_SPI
   220   00102A                     
   221                           ;cc1200.c: 35:         Write_SPI(reg);
   222   00102A  5002               	movf	Read_CC1200@reg^0,w,c
   223   00102C  EC41  F008         	call	_Write_SPI
   224                           
   225                           ;cc1200.c: 36:     } else {
   226   001030  EF1E  F008         	goto	l838
   227   001034                     l834:
   228                           
   229                           ;cc1200.c: 39:         reg |= (1 << 7);
   230   001034  8E02               	bsf	Read_CC1200@reg^0,7,c
   231   001036                     
   232                           ;cc1200.c: 40:         Write_SPI(reg);
   233   001036  5002               	movf	Read_CC1200@reg^0,w,c
   234   001038  EC41  F008         	call	_Write_SPI
   235   00103C                     l838:
   236   00103C  EC4E  F008         	call	_Read_SPI	;wreg free
   237   001040                     
   238                           ;cc1200.c: 43:     LATA5 = 1;
   239   001040  8ABA               	bsf	16314,5,c	;volatile
   240   001042  0012               	return		;funcret
   241   001044                     __end_of_Read_CC1200:
   242                           	callstack 0
   243                           
   244 ;; *************** function _Write_SPI *****************
   245 ;; Defined at:
   246 ;;		line 47 in file "spi.c"
   247 ;; Parameters:    Size  Location     Type
   248 ;;  data            1    wreg     unsigned char 
   249 ;; Auto vars:     Size  Location     Type
   250 ;;  data            1    0[COMRAM] unsigned char 
   251 ;; Return value:  Size  Location     Type
   252 ;;                  1    wreg      void 
   253 ;; Registers used:
   254 ;;		wreg
   255 ;; Tracked objects:
   256 ;;		On entry : 0/0
   257 ;;		On exit  : 0/0
   258 ;;		Unchanged: 0/0
   259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   260 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   261 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   262 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   263 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   264 ;;Total ram usage:        1 bytes
   265 ;; Hardware stack levels used: 1
   266 ;; This function calls:
   267 ;;		Nothing
   268 ;; This function is called by:
   269 ;;		_Read_CC1200
   270 ;;		_Write_CC1200
   271 ;; This function uses a non-reentrant model
   272 ;;
   273                           
   274                           	psect	text2
   275   001082                     __ptext2:
   276                           	callstack 0
   277   001082                     _Write_SPI:
   278                           	callstack 29
   279                           
   280                           ;incstack = 0
   281                           ;Write_SPI@data stored from wreg
   282   001082  6E01               	movwf	Write_SPI@data^0,c
   283   001084                     l89:
   284   001084  013D               	movlb	61	; () banked
   285   001086  BB17               	btfsc	23,5,b	;volatile
   286   001088  EF48  F008         	goto	u21
   287   00108C  EF4A  F008         	goto	u20
   288   001090                     u21:
   289   001090  EF42  F008         	goto	l89
   290   001094                     u20:
   291   001094                     
   292                           ; BSR set to: 61
   293                           ;spi.c: 50:     SPI1TXB = data;
   294   001094  0060  F007  FD11   	movff	Write_SPI@data,15633	;volatile
   295   00109A                     
   296                           ; BSR set to: 61
   297   00109A  0012               	return		;funcret
   298   00109C                     __end_of_Write_SPI:
   299                           	callstack 0
   300                           
   301 ;; *************** function _Read_SPI *****************
   302 ;; Defined at:
   303 ;;		line 39 in file "spi.c"
   304 ;; Parameters:    Size  Location     Type
   305 ;;		None
   306 ;; Auto vars:     Size  Location     Type
   307 ;;  data            1    0[COMRAM] unsigned char 
   308 ;; Return value:  Size  Location     Type
   309 ;;                  1    wreg      unsigned char 
   310 ;; Registers used:
   311 ;;		wreg, status,2
   312 ;; Tracked objects:
   313 ;;		On entry : 0/0
   314 ;;		On exit  : 0/0
   315 ;;		Unchanged: 0/0
   316 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   317 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   318 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   319 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   320 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   321 ;;Total ram usage:        1 bytes
   322 ;; Hardware stack levels used: 1
   323 ;; This function calls:
   324 ;;		Nothing
   325 ;; This function is called by:
   326 ;;		_Read_CC1200
   327 ;; This function uses a non-reentrant model
   328 ;;
   329                           
   330                           	psect	text3
   331   00109C                     __ptext3:
   332                           	callstack 0
   333   00109C                     _Read_SPI:
   334                           	callstack 29
   335   00109C                     l83:
   336   00109C  013D               	movlb	61	; () banked
   337   00109E  A117               	btfss	23,0,b	;volatile
   338   0010A0  EF54  F008         	goto	u11
   339   0010A4  EF56  F008         	goto	u10
   340   0010A8                     u11:
   341   0010A8  EF4E  F008         	goto	l83
   342   0010AC                     u10:
   343   0010AC                     
   344                           ; BSR set to: 61
   345                           ;spi.c: 43:     data = SPI1RXB;
   346   0010AC  006F F440  F001    	movff	15632,Read_SPI@data	;volatile
   347   0010B2                     
   348                           ; BSR set to: 61
   349                           ;spi.c: 44:     return data;
   350   0010B2  5001               	movf	Read_SPI@data^0,w,c
   351   0010B4                     
   352                           ; BSR set to: 61
   353   0010B4  0012               	return		;funcret
   354   0010B6                     __end_of_Read_SPI:
   355                           	callstack 0
   356                           
   357 ;; *************** function _Board_Init *****************
   358 ;; Defined at:
   359 ;;		line 18 in file "main.c"
   360 ;; Parameters:    Size  Location     Type
   361 ;;		None
   362 ;; Auto vars:     Size  Location     Type
   363 ;;		None
   364 ;; Return value:  Size  Location     Type
   365 ;;                  1    wreg      void 
   366 ;; Registers used:
   367 ;;		wreg, status,2, cstack
   368 ;; Tracked objects:
   369 ;;		On entry : 0/0
   370 ;;		On exit  : 0/0
   371 ;;		Unchanged: 0/0
   372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   377 ;;Total ram usage:        0 bytes
   378 ;; Hardware stack levels used: 1
   379 ;; Hardware stack levels required when called: 1
   380 ;; This function calls:
   381 ;;		_ADC_Init
   382 ;;		_LEDs_Init
   383 ;;		_SPI_Init
   384 ;; This function is called by:
   385 ;;		_main
   386 ;; This function uses a non-reentrant model
   387 ;;
   388                           
   389                           	psect	text4
   390   0010C4                     __ptext4:
   391                           	callstack 0
   392   0010C4                     _Board_Init:
   393                           	callstack 29
   394   0010C4                     
   395                           ;main.c: 19:     LEDs_Init();
   396   0010C4  EC69  F008         	call	_LEDs_Init	;wreg free
   397   0010C8                     
   398                           ;main.c: 20:     ADC_Init();
   399   0010C8  EC33  F008         	call	_ADC_Init	;wreg free
   400   0010CC                     
   401                           ;main.c: 21:     SPI_Init();
   402   0010CC  EC22  F008         	call	_SPI_Init	;wreg free
   403   0010D0  0012               	return		;funcret
   404   0010D2                     __end_of_Board_Init:
   405                           	callstack 0
   406                           
   407 ;; *************** function _SPI_Init *****************
   408 ;; Defined at:
   409 ;;		line 10 in file "spi.c"
   410 ;; Parameters:    Size  Location     Type
   411 ;;		None
   412 ;; Auto vars:     Size  Location     Type
   413 ;;		None
   414 ;; Return value:  Size  Location     Type
   415 ;;                  1    wreg      void 
   416 ;; Registers used:
   417 ;;		wreg, status,2
   418 ;; Tracked objects:
   419 ;;		On entry : 0/0
   420 ;;		On exit  : 0/0
   421 ;;		Unchanged: 0/0
   422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   423 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   426 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   427 ;;Total ram usage:        0 bytes
   428 ;; Hardware stack levels used: 1
   429 ;; This function calls:
   430 ;;		Nothing
   431 ;; This function is called by:
   432 ;;		_Board_Init
   433 ;; This function uses a non-reentrant model
   434 ;;
   435                           
   436                           	psect	text5
   437   001044                     __ptext5:
   438                           	callstack 0
   439   001044                     _SPI_Init:
   440                           	callstack 29
   441   001044                     
   442                           ;spi.c: 12:     TRISCbits.TRISC3 = 0;
   443   001044  96C4               	bcf	196,3,c	;volatile
   444                           
   445                           ;spi.c: 13:     TRISCbits.TRISC4 = 1;
   446   001046  88C4               	bsf	196,4,c	;volatile
   447                           
   448                           ;spi.c: 14:     TRISCbits.TRISC5 = 0;
   449   001048  9AC4               	bcf	196,5,c	;volatile
   450                           
   451                           ;spi.c: 15:     TRISAbits.TRISA5 = 0;
   452   00104A  9AC2               	bcf	194,5,c	;volatile
   453                           
   454                           ;spi.c: 17:     LATAbits.LATA5 = 1;
   455   00104C  8ABA               	bsf	186,5,c	;volatile
   456                           
   457                           ;spi.c: 19:     SPI1CON0bits.EN = 0;
   458   00104E  013D               	movlb	61	; () banked
   459   001050  9F14               	bcf	20,7,b	;volatile
   460                           
   461                           ;spi.c: 21:     SPI1CON0bits.MST = 1;
   462   001052  8314               	bsf	20,1,b	;volatile
   463                           
   464                           ;spi.c: 22:     SPI1CON0bits.LSBF = 0;
   465   001054  9514               	bcf	20,2,b	;volatile
   466                           
   467                           ;spi.c: 24:     SPI1CON1bits.CKP = 0;
   468   001056  9B15               	bcf	21,5,b	;volatile
   469                           
   470                           ;spi.c: 25:     SPI1CON1bits.CKE = 0;
   471   001058  9D15               	bcf	21,6,b	;volatile
   472                           
   473                           ;spi.c: 28:     SPI1CON2bits.TXR = 1;
   474   00105A  8316               	bsf	22,1,b	;volatile
   475                           
   476                           ;spi.c: 29:     SPI1CON2bits.RXR = 1;
   477   00105C  8116               	bsf	22,0,b	;volatile
   478   00105E                     
   479                           ; BSR set to: 61
   480                           ;spi.c: 32:     SPI1BAUD = 0;
   481   00105E  0E00               	movlw	0
   482   001060  6F19               	movwf	25,b	;volatile
   483   001062                     
   484                           ; BSR set to: 61
   485                           ;spi.c: 35:     SPI1CON0bits.EN = 1;
   486   001062  8F14               	bsf	20,7,b	;volatile
   487   001064                     
   488                           ; BSR set to: 61
   489   001064  0012               	return		;funcret
   490   001066                     __end_of_SPI_Init:
   491                           	callstack 0
   492                           
   493 ;; *************** function _LEDs_Init *****************
   494 ;; Defined at:
   495 ;;		line 10 in file "leds.c"
   496 ;; Parameters:    Size  Location     Type
   497 ;;		None
   498 ;; Auto vars:     Size  Location     Type
   499 ;;		None
   500 ;; Return value:  Size  Location     Type
   501 ;;                  1    wreg      void 
   502 ;; Registers used:
   503 ;;		None
   504 ;; Tracked objects:
   505 ;;		On entry : 0/0
   506 ;;		On exit  : 0/0
   507 ;;		Unchanged: 0/0
   508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   509 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   512 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   513 ;;Total ram usage:        0 bytes
   514 ;; Hardware stack levels used: 1
   515 ;; This function calls:
   516 ;;		Nothing
   517 ;; This function is called by:
   518 ;;		_Board_Init
   519 ;; This function uses a non-reentrant model
   520 ;;
   521                           
   522                           	psect	text6
   523   0010D2                     __ptext6:
   524                           	callstack 0
   525   0010D2                     _LEDs_Init:
   526                           	callstack 29
   527   0010D2                     
   528                           ;leds.c: 12:     TRISAbits.TRISA2 = 0;
   529   0010D2  94C2               	bcf	194,2,c	;volatile
   530                           
   531                           ;leds.c: 13:     TRISAbits.TRISA3 = 0;
   532   0010D4  96C2               	bcf	194,3,c	;volatile
   533                           
   534                           ;leds.c: 14:     TRISAbits.TRISA4 = 0;
   535   0010D6  98C2               	bcf	194,4,c	;volatile
   536   0010D8  0012               	return		;funcret
   537   0010DA                     __end_of_LEDs_Init:
   538                           	callstack 0
   539                           
   540 ;; *************** function _ADC_Init *****************
   541 ;; Defined at:
   542 ;;		line 12 in file "adc.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;		None
   545 ;; Auto vars:     Size  Location     Type
   546 ;;		None
   547 ;; Return value:  Size  Location     Type
   548 ;;                  1    wreg      void 
   549 ;; Registers used:
   550 ;;		wreg, status,2
   551 ;; Tracked objects:
   552 ;;		On entry : 0/0
   553 ;;		On exit  : 0/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   557 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   559 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   560 ;;Total ram usage:        0 bytes
   561 ;; Hardware stack levels used: 1
   562 ;; This function calls:
   563 ;;		Nothing
   564 ;; This function is called by:
   565 ;;		_Board_Init
   566 ;; This function uses a non-reentrant model
   567 ;;
   568                           
   569                           	psect	text7
   570   001066                     __ptext7:
   571                           	callstack 0
   572   001066                     _ADC_Init:
   573                           	callstack 29
   574   001066                     
   575                           ;adc.c: 13:     ADCON0bits.FM = 1;
   576   001066  013E               	movlb	62	; () banked
   577   001068  51F8               	movf	248,w,b	;volatile
   578   00106A  0BF3               	andlw	-13
   579   00106C  0904               	iorlw	4
   580   00106E  6FF8               	movwf	248,b	;volatile
   581   001070                     
   582                           ; BSR set to: 62
   583                           ;adc.c: 14:     ADCON0bits.CS = 1;
   584   001070  89F8               	bsf	248,4,b	;volatile
   585                           
   586                           ;adc.c: 15:     ADPCH = 0x00;
   587   001072  0E00               	movlw	0
   588   001074  6FF1               	movwf	241,b	;volatile
   589   001076                     
   590                           ; BSR set to: 62
   591                           ;adc.c: 16:     TRISAbits.TRISA0 = 1;
   592   001076  80C2               	bsf	194,0,c	;volatile
   593   001078                     
   594                           ; BSR set to: 62
   595                           ;adc.c: 17:     ANSELAbits.ANSELA0 = 1;
   596   001078  013A               	movlb	58	; () banked
   597   00107A  8140               	bsf	64,0,b	;volatile
   598   00107C                     
   599                           ; BSR set to: 58
   600                           ;adc.c: 18:     ADCON0bits.ON = 1;
   601   00107C  013E               	movlb	62	; () banked
   602   00107E  8FF8               	bsf	248,7,b	;volatile
   603   001080                     
   604                           ; BSR set to: 62
   605   001080  0012               	return		;funcret
   606   001082                     __end_of_ADC_Init:
   607                           	callstack 0
   608                           
   609                           	psect	smallconst
   610   001000                     __psmallconst:
   611                           	callstack 0
   612   001000  00                 	db	0
   613   001001  00                 	db	0	; dummy byte at the end
   614   000000                     
   615                           	psect	rparam
   616   000000                     tosu	equ	0x3FFF
   617                           tosh	equ	0x3FFE
   618                           tosl	equ	0x3FFD
   619                           stkptr	equ	0x3FFC
   620                           pclatu	equ	0x3FFB
   621                           pclath	equ	0x3FFA
   622                           pcl	equ	0x3FF9
   623                           tblptru	equ	0x3FF8
   624                           tblptrh	equ	0x3FF7
   625                           tblptrl	equ	0x3FF6
   626                           tablat	equ	0x3FF5
   627                           prodh	equ	0x3FF4
   628                           prodl	equ	0x3FF3
   629                           indf0	equ	0x3FEF
   630                           postinc0	equ	0x3FEE
   631                           postdec0	equ	0x3FED
   632                           preinc0	equ	0x3FEC
   633                           plusw0	equ	0x3FEB
   634                           fsr0h	equ	0x3FEA
   635                           fsr0l	equ	0x3FE9
   636                           wreg	equ	0x3FE8
   637                           indf1	equ	0x3FE7
   638                           postinc1	equ	0x3FE6
   639                           postdec1	equ	0x3FE5
   640                           preinc1	equ	0x3FE4
   641                           plusw1	equ	0x3FE3
   642                           fsr1h	equ	0x3FE2
   643                           fsr1l	equ	0x3FE1
   644                           bsr	equ	0x3FE0
   645                           indf2	equ	0x3FDF
   646                           postinc2	equ	0x3FDE
   647                           postdec2	equ	0x3FDD
   648                           preinc2	equ	0x3FDC
   649                           plusw2	equ	0x3FDB
   650                           fsr2h	equ	0x3FDA
   651                           fsr2l	equ	0x3FD9
   652                           status	equ	0x3FD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      2       2
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    _main->_Read_CC1200
    _Read_CC1200->_Read_SPI
    _Read_CC1200->_Write_SPI

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      80
                         _Board_Init
                        _Read_CC1200
 ---------------------------------------------------------------------------------
 (1) _Read_CC1200                                          2     2      0      80
                                              1 COMRAM     1     1      0
                           _Read_SPI
                          _Write_SPI
 ---------------------------------------------------------------------------------
 (2) _Write_SPI                                            1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _Read_SPI                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Board_Init                                           0     0      0       0
                           _ADC_Init
                          _LEDs_Init
                           _SPI_Init
 ---------------------------------------------------------------------------------
 (2) _SPI_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _LEDs_Init                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Board_Init
     _ADC_Init
     _LEDs_Init
     _SPI_Init
   _Read_CC1200
     _Read_SPI
     _Write_SPI

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      2       2       1        2.1%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK15          100      0       0      34        0.0%
BANK15             100      0       0      35        0.0%
BITBIGSFRhhh        33      0       0      36        0.0%
BITBIGSFRhhl         7      0       0      37        0.0%
BITBIGSFRhl          1      0       0      38        0.0%
BITBIGSFRlh          7      0       0      39        0.0%
BITBIGSFRllh        C1      0       0      40        0.0%
BITBIGSFRlllh        6      0       0      41        0.0%
BITBIGSFRllllhh    1D5      0       0      42        0.0%
BITBIGSFRllllhh      1      0       0      43        0.0%
BITBIGSFRllllhl      2      0       0      44        0.0%
BITBIGSFRllllhl    2CF      0       0      45        0.0%
BITBIGSFRlllll     340      0       0      46        0.0%
ABS                  0      0       0      47        0.0%
BIGRAM             FFF      0       0      48        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_9             0      0       0     200        0.0%
SFR_9                0      0       0     200        0.0%
BITSFR_8             0      0       0     200        0.0%
SFR_8                0      0       0     200        0.0%
BITSFR_7             0      0       0     200        0.0%
SFR_7                0      0       0     200        0.0%
BITSFR_6             0      0       0     200        0.0%
SFR_6                0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri Feb 28 14:32:07 2025

                     l11 10D0                       l16 10C0                       l51 1080  
                     l27 10D8                       l80 1064                       l83 109C  
                     l92 109A                       l85 10AC                       l86 10B4  
                     l89 1084                       u10 10AC                       u11 10A8  
                     u20 1094                       u21 1090                       u30 1014  
                     u31 1010                       u40 1024                       u41 1020  
                    l111 1006                      l116 1042                      l800 1078  
                    l802 107C                      l810 109C                      l804 1044  
                    l820 10C4                      l812 10B2                      l806 105E  
                    l822 10C8                      l830 1024                      l808 1062  
                    l824 10CC                      l816 1084                      l840 1040  
                    l832 102A                      l818 1094                      l834 1034  
                    l826 1004                      l836 1036                      l828 1014  
                    l844 10B6                      l838 103C                      l846 10BA  
                    l792 10D2                      l794 1066                      l796 1070  
                    l798 1076            ??_Read_CC1200 0002                     _main 10B6  
       __end_of_ADC_Init 1082                     start FFFC               _Board_Init 10C4  
         _SPI1STATUSbits 3D17             ___param_bank 0000                    ?_main 0001  
                  _ADPCH 3EF1                    _LATA2 1FDD2                    _LATA3 1FDD3  
                  _LATA4 1FDD4                    _LATA5 1FDD5         __end_of_SPI_Init 1066  
    __end_of_Read_CC1200 1044          __initialization 10DA             __end_of_main 10C4  
       __end_of_Read_SPI 10B6                   ??_main 0003            __activetblptr 0000  
                 _ADRESH 3EF0                   _ADRESL 3EEF        __end_of_LEDs_Init 10DA  
            ?_Board_Init 0001             Read_SPI@data 0001                   isa$std 0001  
              ?_ADC_Init 0001             __mediumconst 0000              _Read_CC1200 1002  
             __accesstop 0060  __end_of__initialization 10DA            ___rparam_used 0001  
         __pcstackCOMRAM 0001                ?_SPI_Init 0001               ??_ADC_Init 0001  
              ?_Read_SPI 0001               ??_SPI_Init 0001        __end_of_Write_SPI 109C  
                _SPI1RXB 3D10                  _SPI1TXB 3D11               ??_Read_SPI 0001  
                __Hparam 0000                  __Lparam 0000             __psmallconst 1000  
                __pcinit 10DA                  __ramtop 1000                  __ptext0 10B6  
                __ptext1 1002                  __ptext2 1082                  __ptext3 109C  
                __ptext4 10C4                  __ptext5 1044                  __ptext6 10D2  
                __ptext7 1066     end_of_initialization 10DA                _LEDs_Init 10D2  
           ??_Board_Init 0001                _PORTCbits 3FCC                _TRISAbits 3FC2  
              _TRISCbits 3FC4       __end_of_Board_Init 10D2             ?_Read_CC1200 0001  
         Read_CC1200@reg 0002               ?_LEDs_Init 0001      start_initialization 10DA  
          Write_SPI@data 0001                _Write_SPI 1082              ??_LEDs_Init 0001  
            __smallconst 1000                 _ADC_Init 1066               ?_Write_SPI 0001  
               _LATAbits 3FBA             _SPI1CON0bits 3D14             _SPI1CON1bits 3D15  
           _SPI1CON2bits 3D16                 _SPI1BAUD 3D19                 _SPI_Init 1044  
             _ADCON0bits 3EF8                 _Read_SPI 109C                 __Hrparam 0000  
               __Lrparam 0000               _ANSELAbits 3A40              ??_Write_SPI 0001  
               isa$xinst 0000  
